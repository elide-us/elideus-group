# from __future__ import annotations
# import os, inspect, importlib.util
# from pydantic import BaseModel
# from genlib import model_to_ts

# REPO_ROOT = os.path.join(os.path.dirname(__file__), '..')
# ROOT = os.path.join(REPO_ROOT, 'rpc')
# FRONTEND_SRC = os.path.join(REPO_ROOT, 'frontend', 'src', 'shared')

# def load_module(path: str):
#   spec = importlib.util.spec_from_file_location("mod", path)
#   module = importlib.util.module_from_spec(spec)
#   spec.loader.exec_module(module)  # type: ignore
#   return module

# def main() -> None:
#   print("âœ¨ Starting RPC model extraction and TS generation...")
#   interfaces: list[str] = []
#   for root, _, files in os.walk(ROOT):
#     if 'models.py' in files:
#       path = os.path.join(root, 'models.py')
#       module = load_module(path)
#       for _, obj in inspect.getmembers(module):
#         if inspect.isclass(obj) and issubclass(obj, BaseModel) and obj is not BaseModel:
#           print(f"ðŸ§© Found model: {obj.__name__}")
#           interfaces.append(model_to_ts(obj))

#     os.makedirs(FRONTEND_SRC, exist_ok=True)
#     out_path = os.path.join(FRONTEND_SRC, 'RpcModels.tsx')
#     with open(out_path, 'w') as f:
#       f.write("\n".join(interfaces))
#     print(f"âœ… Wrote {len(interfaces)} TypeScript interfaces to '{out_path}'")

# if __name__ == "__main__":
#   main()

from __future__ import annotations
import os
import inspect
import importlib.util
from typing import List
from pydantic import BaseModel
from genlib import model_to_ts

REPO_ROOT = os.path.join(os.path.dirname(__file__), '..')
ROOT = os.path.join(REPO_ROOT, 'rpc')
FRONTEND_SRC = os.path.join(REPO_ROOT, 'frontend', 'src', 'shared')
OUT_FILE = os.path.join(FRONTEND_SRC, 'RpcModels.tsx')

HEADER_COMMENT = [
  "// ================================================",
  "// WARNING: This file is automatically generated.",
  "// Do not modify it by hand. Your changes will be",
  "// overwritten the next time the generator runs.",
  "// ================================================",
  ""
]

def load_module(path: str):
  spec = importlib.util.spec_from_file_location("mod", path)
  module = importlib.util.module_from_spec(spec)
  spec.loader.exec_module(module)  # type: ignore
  return module

def extract_interfaces_from_models_py(path: str) -> List[str]:
  interfaces = []
  module = load_module(path)
  for _, obj in inspect.getmembers(module):
    if inspect.isclass(obj) and issubclass(obj, BaseModel) and obj is not BaseModel:
      print(f"ðŸ§© Found model: {obj.__name__}")
      interfaces.append(model_to_ts(obj))
  return interfaces

def find_all_interfaces() -> List[str]:
  interfaces = []
  for root, _, files in os.walk(ROOT):
    if 'models.py' in files:
      models_path = os.path.join(root, 'models.py')
      interfaces.extend(extract_interfaces_from_models_py(models_path))
  return interfaces

def write_interfaces_to_file(interfaces: List[str]) -> None:
  os.makedirs(FRONTEND_SRC, exist_ok=True)
  with open(OUT_FILE, 'w') as f:
    f.write("\n".join(HEADER_COMMENT + interfaces))
  print(f"âœ… Wrote {len(interfaces)} TypeScript interfaces to '{OUT_FILE}'")

def main() -> None:
  print("âœ¨ Starting RPC model extraction and TS generation...")
  interfaces = find_all_interfaces()
  write_interfaces_to_file(interfaces)

if __name__ == "__main__":
  main()
