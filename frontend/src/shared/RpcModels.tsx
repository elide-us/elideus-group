// ================================================
// WARNING: This file is automatically generated.
// Do not modify it by hand. Your changes will be
// overwritten the next time the generator runs.
// ================================================

import axios from "axios";
import { getFingerprint } from "./fingerprint";

export interface UsersProvidersCreateFromProvider1 {
	provider: string;
	provider_identifier: string;
	provider_email: string;
	provider_displayname: string;
	provider_profile_image: any;
}
export interface UsersProvidersGetByProviderIdentifier1 {
	provider: string;
	provider_identifier: string;
}
export interface UsersProvidersLinkProvider1 {
	provider: string;
	code: any;
	id_token: any;
	access_token: any;
}
export interface UsersProvidersSetProvider1 {
	provider: string;
	code: any;
	id_token: any;
	access_token: any;
}
export interface UsersProvidersUnlinkProvider1 {
	provider: string;
	new_default: any;
}
export interface UsersProfileAuthProvider1 {
	name: string;
	display: string;
}
export interface UsersProfileProfile1 {
	guid: string;
	display_name: string;
	email: string;
	display_email: boolean;
	credits: number;
	profile_image: string | null;
	default_provider: string;
	auth_providers: UsersProfileAuthProvider1[];
}
export interface UsersProfileRoles1 {
	roles: number;
}
export interface UsersProfileSetDisplay1 {
	display_name: string;
}
export interface UsersProfileSetOptin1 {
	display_email: boolean;
}
export interface UsersProfileSetProfileImage1 {
	image_b64: string;
	provider: string;
}
export interface AccountUserCreateFolder1 {
	userGuid: string;
	path: string;
}
export interface AccountUserCredits1 {
	userGuid: string;
	credits: number;
}
export interface AccountUserDisplayName1 {
	userGuid: string;
	displayName: string;
}
export interface AccountUserGuid1 {
	userGuid: string;
}
export interface AccountUserSetCredits1 {
	userGuid: string;
	credits: number;
}
export interface AccountRoleDeleteRole1 {
	name: string;
}
export interface AccountRoleList1 {
	roles: AccountRoleRoleItem1[];
}
export interface AccountRoleMemberUpdate1 {
	role: string;
	userGuid: string;
}
export interface AccountRoleMembers1 {
	members: AccountRoleUserItem1[];
	nonMembers: AccountRoleUserItem1[];
}
export interface AccountRoleRoleItem1 {
	name: string;
	mask: string;
	display: any;
}
export interface AccountRoleUpsertRole1 {
	name: string;
	mask: string;
	display: any;
}
export interface AccountRoleUserItem1 {
	guid: string;
	displayName: string;
}
export interface StorageFilesCreateFolder1 {
	path: string;
}
export interface StorageFilesCreateUserFolder1 {
	path: string;
}
export interface StorageFilesDeleteFiles1 {
	files: string[];
}
export interface StorageFilesDeleteFolder1 {
	path: string;
}
export interface StorageFilesFileItem1 {
	path: string;
	name: string;
	url: string;
	content_type: string | null;
	user_guid: string | null;
	display_name: string | null;
	gallery: boolean | null;
}
export interface StorageFilesFileMetadata1 {
	name: string;
	size: number;
	content_type: string | null;
	created_on: string;
	modified_on: string;
}
export interface StorageFilesFiles1 {
	files: StorageFilesFileItem1[];
}
export interface StorageFilesFolderItem1 {
	name: string;
	empty: boolean;
}
export interface StorageFilesFolderListing1 {
	path: string;
	files: StorageFilesFileItem1[];
	folders: StorageFilesFolderItem1[];
}
export interface StorageFilesGetFolderFiles1 {
	path: string;
}
export interface StorageFilesGetLink1 {
	name: string;
}
export interface StorageFilesGetMetadata1 {
	name: string;
}
export interface StorageFilesMoveFile1 {
	src: string;
	dst: string;
}
export interface StorageFilesRenameFile1 {
	old_name: string;
	new_name: string;
}
export interface StorageFilesReportFile1 {
	guid: string;
	name: string;
}
export interface StorageFilesSetGallery1 {
	name: string;
	gallery: boolean;
}
export interface StorageFilesUploadFile1 {
	name: string;
	content_b64: string;
	content_type: string | null;
}
export interface StorageFilesUploadFiles1 {
	files: StorageFilesUploadFile1[];
}
export interface StorageFilesUsage1 {
	total_size: number;
	by_type: StorageFilesUsageItem1[];
}
export interface StorageFilesUsageItem1 {
	content_type: string;
	size: number;
}
export interface DiscordCommandTextUwuResponse1 {
	message: string;
}
export interface PublicUsersProfile1 {
	display_name: string;
	email: string | null;
	profile_image: string | null;
}
export interface PublicUsersPublishedFile1 {
	path: string;
	filename: string;
	url: string;
}
export interface PublicUsersPublishedFiles1 {
	files: PublicUsersPublishedFile1[];
}
export interface PublicVarsFfmpegVersion1 {
	ffmpeg_version: string;
}
export interface PublicVarsHostname1 {
	hostname: string;
}
export interface PublicVarsOdbcVersion1 {
	odbc_version: string;
}
export interface PublicVarsRepo1 {
	repo: string;
}
export interface PublicVarsVersion1 {
	version: string;
}
export interface PublicGalleryFileItem1 {
	path: string;
	name: string;
	url: string;
	content_type: string | null;
	user_guid: string | null;
	display_name: string | null;
}
export interface PublicGalleryFiles1 {
	files: PublicGalleryFileItem1[];
}
export interface PublicLinksHomeLinks1 {
	links: PublicLinksLinkItem1[];
}
export interface PublicLinksLinkItem1 {
	title: string;
	url: string;
}
export interface PublicLinksNavBarRoute1 {
	path: string;
	name: string;
	icon: string | null;
}
export interface PublicLinksNavBarRoutes1 {
	routes: PublicLinksNavBarRoute1[];
}
export interface ServiceRolesDeleteRole1 {
	name: string;
}
export interface ServiceRolesList1 {
	roles: ServiceRolesRoleItem1[];
}
export interface ServiceRolesRoleItem1 {
	name: string;
	mask: string;
	display: any;
}
export interface ServiceRolesUpsertRole1 {
	name: string;
	mask: string;
	display: any;
}
export interface ServiceRoutesDeleteRoute1 {
	path: string;
}
export interface ServiceRoutesList1 {
	routes: ServiceRoutesRouteItem1[];
}
export interface ServiceRoutesRouteItem1 {
	path: string;
	name: string;
	icon: string | null;
	sequence: number;
	required_roles: string[];
}
export interface SystemRolesDeleteRole1 {
	name: string;
}
export interface SystemRolesList1 {
	roles: SystemRolesRoleItem1[];
}
export interface SystemRolesRoleItem1 {
	name: string;
	mask: string;
	display: any;
}
export interface SystemRolesUpsertRole1 {
	name: string;
	mask: string;
	display: any;
}
export interface SystemStorageStats1 {
	file_count: number;
	total_bytes: number;
	folder_count: number;
	user_folder_count: number;
	db_rows: number;
}
export interface SystemConfigConfigItem1 {
	key: string;
	value: string;
}
export interface SystemConfigDeleteConfig1 {
	key: string;
}
export interface SystemConfigList1 {
	items: SystemConfigConfigItem1[];
}
export interface SupportUsersCredits1 {
	userGuid: string;
	credits: number;
}
export interface SupportUsersDisplayName1 {
	userGuid: string;
	displayName: string;
}
export interface SupportUsersGuid1 {
	userGuid: string;
}
export interface SupportUsersSetCredits1 {
	userGuid: string;
	credits: number;
}
export interface SupportRolesMembers1 {
	members: SupportRolesUserItem1[];
	nonMembers: SupportRolesUserItem1[];
}
export interface SupportRolesRoleMemberUpdate1 {
	role: string;
	userGuid: string;
}
export interface SupportRolesUserItem1 {
	guid: string;
	displayName: string;
}
export interface AuthMicrosoftOauthLogin1 {
	sessionToken: string;
	display_name: string;
	credits: number;
	profile_image: string | null;
}
export interface AuthProvidersUnlinkLastProvider1 {
	guid: string;
	provider: string;
}
export interface AuthGoogleOauthLogin1 {
	sessionToken: string;
	display_name: string;
	credits: number;
	profile_image: string | null;
}
export interface AuthGoogleOauthLoginPayload1 {
	provider: string;
	code: string;
	confirm: any;
	reauthToken: any;
	fingerprint: string;
}
export interface AuthDiscordOauthLogin1 {
	sessionToken: string;
	display_name: string;
	credits: number;
	profile_image: string | null;
}
export interface AuthDiscordOauthLoginPayload1 {
	provider: string;
	code: string;
	fingerprint: string;
	confirm: any;
	reauthToken: any;
}

export async function rpcCall<T>(op: string, payload: any = null): Promise<T> {
	const request = {
	op,
	payload,
	version: 1,
	timestamp: new Date().toISOString(),
	};
	const headers: Record<string, string> = {};
	if (typeof localStorage !== 'undefined') {
		try {
			const raw = localStorage.getItem('authTokens');
			if (raw) {
				const { sessionToken } = JSON.parse(raw);
				if (sessionToken) headers.Authorization = `Bearer ${sessionToken}`;
			}
		} catch {
			/* ignore token parsing errors */
		}
	}
	try {
		const response = await axios.post('/rpc', request, { headers });
		return response.data.payload as T;
	} catch (err: any) {
		if (axios.isAxiosError(err) && err.response?.status === 401) {
			try {
				const refreshReq = {
					op: 'urn:auth:session:refresh_token:1',
					payload: { fingerprint: getFingerprint() },
					version: 1,
					timestamp: new Date().toISOString(),
				};
				const refreshResp = await axios.post('/rpc', refreshReq);
				const newToken = refreshResp.data.payload.token;
				if (typeof localStorage !== 'undefined') {
					const raw = localStorage.getItem('authTokens');
					if (raw) {
						const data = JSON.parse(raw);
						data.sessionToken = newToken;
						localStorage.setItem('authTokens', JSON.stringify(data));
					}
				}
				headers.Authorization = `Bearer ${newToken}`;
				const retryResp = await axios.post('/rpc', request, { headers });
				return retryResp.data.payload as T;
			} catch {
				if (typeof localStorage !== 'undefined') {
					localStorage.removeItem('authTokens');
				}
				if (typeof window !== 'undefined') {
					window.dispatchEvent(new Event('sessionExpired'));
				}
			}
		}
		throw err;
	}
}
