// ================================================
// WARNING: This file is automatically generated.
// Do not modify it by hand. Your changes will be
// overwritten the next time the generator runs.
// ================================================

import axios from "axios";

export interface RPCRequest {
  op: string;
  user_guid: string;
  user_role: number;
  payload: any | null;
  version: number;
  timestamp: string | null;
}
export interface RPCResponse {
  op: string;
  payload: any;
  version: number;
  timestamp: string | null;
}
export interface AccountRoleDelete1 {
  name: string;
}
export interface AccountRoleMemberList1 {
  guid: string;
  displayName: string;
}
export interface AccountRoleMemberUpdate1 {
  role: string;
  userGuid: string;
}
export interface AccountRoleMembers1 {
  members: AccountRoleMemberList1[];
  nonMembers: AccountRoleMemberList1[];
}
export interface AccountRoleUpdate1 {
  name: string;
  display: string;
  bit: number;
}
export interface AccountRolesList1 {
  roles: RoleItem[];
}
export interface RoleItem {
  name: string;
  display: string;
  bit: number;
}
export interface AccountUserCreditsUpdate1 {
  userGuid: string;
  credits: number;
}
export interface AccountUserDisplayNameUpdate1 {
  userGuid: string;
  displayName: string;
}
export interface AccountUserProfile1 {
  guid: string;
  defaultProvider: string;
  username: string;
  email: string;
  backupEmail: any;
  profilePicture: any;
  credits: any;
  storageUsed: any;
  storageEnabled: any;
  displayEmail: boolean;
}
export interface AccountUserRoles1 {
  roles: string[];
}
export interface AccountUserRolesUpdate1 {
  userGuid: string;
  roles: string[];
}
export interface AccountUsersList1 {
  users: UserListItem[];
}
export interface UserListItem {
  guid: string;
  displayName: string;
}
export interface AuthMicrosoftLoginData1 {
  bearerToken: string;
  defaultProvider: string;
  username: string;
  email: string;
  backupEmail: string | null;
  profilePicture: string | null;
  credits: number | null;
}
export interface AuthSessionTokens1 {
  bearerToken: string;
}
export interface AccessToken1 {
  accessToken: string;
  accessSubject: string;
  accessExpires: string;
}
export interface FrontendLinksHome1 {
  links: LinkItem[];
}
export interface FrontendLinksRoutes1 {
  routes: RouteItem[];
}
export interface LinkItem {
  title: string;
  url: string;
}
export interface RouteItem {
  path: string;
  name: string;
  icon: string;
}
export interface FrontendUserProfileData1 {
  bearerToken: string;
  defaultProvider: string;
  username: string;
  email: string;
  backupEmail: string | null;
  profilePicture: string | null;
  credits: number | null;
  storageUsed: number | null;
  storageEnabled: boolean;
  displayEmail: boolean;
  roles: string[];
}
export interface FrontendUserSetDisplayName1 {
  bearerToken: string;
  displayName: string;
}
export interface FrontendVarsFfmpegVersion1 {
  ffmpeg_version: string;
}
export interface FrontendVarsHostname1 {
  hostname: string;
}
export interface FrontendVarsRepo1 {
  repo: string;
}
export interface FrontendVarsVersion1 {
  version: string;
}
export interface ViewDiscord1 {
  content: string;
}
export interface FileItem {
  name: string;
  url: string;
  contentType: string | null;
}
export interface StorageFileDelete1 {
  bearerToken: string;
  filename: string;
}
export interface StorageFileUpload1 {
  bearerToken: string;
  filename: string;
  dataUrl: string;
  contentType: string;
}
export interface StorageFilesList1 {
  files: FileItem[];
}
export interface ConfigItem {
  key: string;
  value: string;
}
export interface SystemConfigDelete1 {
  key: string;
}
export interface SystemConfigList1 {
  items: ConfigItem[];
}
export interface SystemConfigUpdate1 {
  key: string;
  value: string;
}
export interface RoleMemberListItem1 {
  guid: string;
  displayName: string;
}
export interface SystemRoleDelete1 {
  name: string;
}
export interface SystemRoleMemberUpdate1 {
  role: string;
  userGuid: string;
}
export interface SystemRoleMembers1 {
  members: any[];
  nonMembers: any[];
}
export interface SystemRoleUpdate1 {
  name: string;
  display: string;
  bit: number;
}
export interface SystemRolesList1 {
  roles: RoleItem[];
}
export interface SystemRouteDelete1 {
  path: string;
}
export interface SystemRouteItem {
  path: string;
  name: string;
  icon: string;
  sequence: number;
  requiredRoles: string[];
}
export interface SystemRouteUpdate1 {
  path: string;
  name: string;
  icon: string;
  sequence: number;
  requiredRoles: string[];
}
export interface SystemRoutesList1 {
  routes: SystemRouteItem[];
}
export interface SystemUserCreditsUpdate1 {
  userGuid: string;
  credits: number;
}
export interface SystemUserProfile1 {
  guid: string;
  defaultProvider: string;
  username: string;
  email: string;
  backupEmail: string | null;
  profilePicture: string | null;
  credits: number | null;
  storageUsed: number | null;
  storageEnabled: boolean;
  displayEmail: boolean;
}
export interface SystemUserRoles1 {
  roles: string[];
}
export interface SystemUserRolesUpdate1 {
  userGuid: string;
  roles: string[];
}
export interface SystemUsersList1 {
  users: UserListItem[];
}

export async function rpcCall<T>(op: string, payload: any = null, user_guid: string, user_role: number): Promise<T> {
    const request: RPCRequest = {
        op,
        payload,
        user_guid,
        user_role,
        version: 1,
        timestamp: new Date().toISOString()
    };
    const headers: Record<string, string> = {};
    if (typeof localStorage !== 'undefined') {
        try {
            const raw = localStorage.getItem('authTokens');
            if (raw) {
                const { bearerToken } = JSON.parse(raw);
                if (bearerToken) headers.Authorization = `Bearer ${bearerToken}`;
            }
        } catch {
            /* ignore token parsing errors */
        }
    }
    const response = await axios.post<RPCResponse>('/rpc', request, { headers });
    return response.data.payload as T;
}
