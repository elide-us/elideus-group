// ================================================
// WARNING: This file is automatically generated.
// Do not modify it by hand. Your changes will be
// overwritten the next time the generator runs.
// ================================================

import axios from "axios";

export interface RPCRequest {
  op: string;
  payload: any | null;
  version: number;
  timestamp: string | null;
}
export interface RPCResponse {
  op: string;
  payload: any;
  version: number;
  timestamp: string | null;
}
export interface SessionToken {
  sub: string;
  roles: string[];
  iat: number;
  exp: number;
  jti: string;
  session: string;
  provider: string;
}

export async function rpcCall<T>(op: string, payload: any = null, user_guid: string, user_role: number): Promise<T> {
    const request: RPCRequest = {
        op,
        payload,
        user_guid,
        user_role,
        version: 1,
        timestamp: new Date().toISOString()
    };
    const headers: Record<string, string> = {};
    if (typeof localStorage !== 'undefined') {
        try {
            const raw = localStorage.getItem('authTokens');
            if (raw) {
                const { bearerToken } = JSON.parse(raw);
                if (bearerToken) headers.Authorization = `Bearer ${bearerToken}`;
            }
        } catch {
            /* ignore token parsing errors */
        }
    }
    const response = await axios.post<RPCResponse>('/rpc', request, { headers });
    return response.data.payload as T;
}
